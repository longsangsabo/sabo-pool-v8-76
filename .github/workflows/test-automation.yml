name: Automated Testing

on:
  schedule:
    # Run tests every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - unit
        - e2e
        - visual
        - performance
      environment:
        description: 'Environment to test against'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'

jobs:
  # Automated Unit Tests
  automated-unit-tests:
    name: Automated Unit Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'unit' || github.event_name == 'schedule'
    
    strategy:
      matrix:
        test-suite:
          - services
          - hooks
          - components
          - utils
          - integration
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run test suite - ${{ matrix.test-suite }}
        run: |
          case "${{ matrix.test-suite }}" in
            "services")
              npm run test:run -- src/services
              ;;
            "hooks")
              npm run test:run -- src/hooks
              ;;
            "components")
              npm run test:run -- src/components
              ;;
            "utils")
              npm run test:run -- src/utils src/lib
              ;;
            "integration")
              npm run test:run -- src/test/integration
              ;;
          esac

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results-${{ matrix.test-suite }}
          path: |
            coverage/
            test-results/

  # Automated E2E Tests
  automated-e2e-tests:
    name: Automated E2E Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'e2e' || github.event_name == 'schedule'
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        test-group:
          - tournament-flow
          - user-management
          - admin-features
          - database-integration
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Setup test environment
        run: |
          echo "Setting up test environment for ${{ github.event.inputs.environment || 'staging' }}"
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "PLAYWRIGHT_BASE_URL=https://your-production-url.com" >> $GITHUB_ENV
          else
            echo "PLAYWRIGHT_BASE_URL=https://your-staging-url.com" >> $GITHUB_ENV
          fi

      - name: Run E2E test group - ${{ matrix.test-group }}
        run: |
          case "${{ matrix.test-group }}" in
            "tournament-flow")
              npx playwright test src/test/e2e/tournament-flow.spec.ts --project=${{ matrix.browser }}
              ;;
            "user-management")
              npx playwright test src/test/e2e/user-management.spec.ts --project=${{ matrix.browser }}
              ;;
            "admin-features")
              npx playwright test src/test/e2e/admin-features.spec.ts --project=${{ matrix.browser }}
              ;;
            "database-integration")
              npx playwright test src/test/e2e/database-integration.spec.ts --project=${{ matrix.browser }}
              ;;
          esac

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-results-${{ matrix.browser }}-${{ matrix.test-group }}
          path: |
            playwright-report/
            test-results/

  # Automated Visual Regression Tests
  automated-visual-tests:
    name: Automated Visual Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'visual' || github.event_name == 'schedule'
    
    strategy:
      matrix:
        viewport:
          - name: desktop
            width: 1920
            height: 1080
          - name: tablet
            width: 768
            height: 1024
          - name: mobile
            width: 375
            height: 667
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Run visual regression tests - ${{ matrix.viewport.name }}
        run: |
          export PLAYWRIGHT_VIEWPORT_WIDTH=${{ matrix.viewport.width }}
          export PLAYWRIGHT_VIEWPORT_HEIGHT=${{ matrix.viewport.height }}
          npx playwright test src/test/e2e/visual-regression.spec.ts

      - name: Upload visual test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: visual-results-${{ matrix.viewport.name }}
          path: |
            test-results/
            playwright-report/

  # Automated Performance Tests
  automated-performance-tests:
    name: Automated Performance Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'performance' || github.event_name == 'schedule'
    
    strategy:
      matrix:
        test-scenario:
          - load-testing
          - stress-testing
          - lighthouse-audit
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Run performance tests - ${{ matrix.test-scenario }}
        run: |
          case "${{ matrix.test-scenario }}" in
            "load-testing")
              npx playwright test src/test/e2e/performance.spec.ts -g "Load Testing"
              ;;
            "stress-testing")
              npx playwright test src/test/e2e/performance.spec.ts -g "stress"
              ;;
            "lighthouse-audit")
              npx playwright test src/test/e2e/performance.spec.ts -g "Lighthouse"
              ;;
          esac

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-results-${{ matrix.test-scenario }}
          path: |
            lighthouse-report/
            performance-results.json

  # Test Results Aggregation
  aggregate-results:
    name: Aggregate Test Results
    runs-on: ubuntu-latest
    needs: [automated-unit-tests, automated-e2e-tests, automated-visual-tests, automated-performance-tests]
    if: always()
    
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v3

      - name: Install jq for JSON processing
        run: sudo apt-get install jq

      - name: Aggregate test results
        run: |
          echo "## 📊 Automated Test Results Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "**Test Run Date:** $(date)" >> test-summary.md
          echo "**Environment:** ${{ github.event.inputs.environment || 'staging' }}" >> test-summary.md
          echo "**Test Type:** ${{ github.event.inputs.test_type || 'all' }}" >> test-summary.md
          echo "" >> test-summary.md
          
          # Count test results
          UNIT_TESTS_PASSED=0
          UNIT_TESTS_FAILED=0
          E2E_TESTS_PASSED=0
          E2E_TESTS_FAILED=0
          
          # Process unit test results
          for dir in unit-test-results-*/; do
            if [ -d "$dir" ]; then
              echo "Processing $dir"
              # Add logic to parse test results
            fi
          done
          
          # Process E2E test results
          for dir in e2e-results-*/; do
            if [ -d "$dir" ]; then
              echo "Processing $dir"
              # Add logic to parse test results
            fi
          done
          
          echo "### 📈 Test Statistics" >> test-summary.md
          echo "| Test Type | Passed | Failed | Total |" >> test-summary.md
          echo "|-----------|--------|--------|-------|" >> test-summary.md
          echo "| Unit Tests | $UNIT_TESTS_PASSED | $UNIT_TESTS_FAILED | $((UNIT_TESTS_PASSED + UNIT_TESTS_FAILED)) |" >> test-summary.md
          echo "| E2E Tests | $E2E_TESTS_PASSED | $E2E_TESTS_FAILED | $((E2E_TESTS_PASSED + E2E_TESTS_FAILED)) |" >> test-summary.md

      - name: Upload aggregated results
        uses: actions/upload-artifact@v3
        with:
          name: aggregated-test-results
          path: test-summary.md

      - name: Send notification on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#testing'
          text: '🚨 Automated test run failed! Check the workflow for details.'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create GitHub Issue on failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🐛 Automated Test Failure - ' + new Date().toISOString().split('T')[0],
              body: `## Automated Test Failure Report
              
              **Date:** ${new Date().toISOString()}
              **Workflow:** ${context.workflow}
              **Run ID:** ${context.runId}
              
              One or more automated tests have failed. Please investigate:
              
              - Check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})
              - Review failed test artifacts
              - Fix any identified issues
              
              ### Failed Jobs:
              ${{ toJSON(needs) }}
              `,
              labels: ['bug', 'automated-test-failure', 'high-priority']
            });

  # Cleanup old test results
  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    needs: aggregate-results
    if: always()
    
    steps:
      - name: Delete artifacts older than 30 days
        uses: actions/github-script@v7
        with:
          script: |
            const cutoff = new Date();
            cutoff.setDate(cutoff.getDate() - 30);
            
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            for (const artifact of artifacts.data.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < cutoff) {
                console.log(`Deleting artifact: ${artifact.name} (${artifact.created_at})`);
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
              }
            }