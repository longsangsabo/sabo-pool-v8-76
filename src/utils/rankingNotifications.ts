import { toast } from '@/hooks/use-toast';
import { formatRankDisplay, type RankCode } from './rankUtils';

export interface RankPromotionData {
  oldRank: RankCode;
  newRank: RankCode;
  newElo: number;
}

export interface EloEarnedData {
  earnedElo: number;
  source: string;
  newTotal: number;
}

export interface SPAEarnedData {
  earnedSpa: number;
  source: string;
  newTotal: number;
}

/**
 * Hi·ªÉn th·ªã th√¥ng b√°o khi thƒÉng h·∫°ng
 */
export function showRankPromotionNotification({
  oldRank,
  newRank,
  newElo,
}: RankPromotionData) {
  toast({
    title: 'üéâ Ch√∫c m·ª´ng!',
    description: `B·∫°n ƒë√£ thƒÉng h·∫°ng t·ª´ ${formatRankDisplay(oldRank)} l√™n ${formatRankDisplay(newRank)}! ELO hi·ªán t·∫°i: ${newElo}`,
    duration: 8000,
    className:
      'bg-gradient-to-r from-green-500 to-green-600 text-white border-green-600',
  });
}

/**
 * Hi·ªÉn th·ªã th√¥ng b√°o khi nh·∫≠n ƒëi·ªÉm ELO
 */
export function showEloEarnedNotification({
  earnedElo,
  source,
  newTotal,
}: EloEarnedData) {
  const isPositive = earnedElo > 0;
  const emoji = isPositive ? '‚¨ÜÔ∏è' : '‚¨áÔ∏è';
  const color = isPositive
    ? 'from-blue-500 to-blue-600'
    : 'from-red-500 to-red-600';

  toast({
    title: `${emoji} ELO ${isPositive ? 'tƒÉng' : 'gi·∫£m'}!`,
    description: `${isPositive ? '+' : ''}${earnedElo} ƒëi·ªÉm ELO t·ª´ ${source}. T·ªïng: ${newTotal}`,
    duration: 5000,
    className: `bg-gradient-to-r ${color} text-white`,
  });
}

/**
 * Hi·ªÉn th·ªã th√¥ng b√°o khi nh·∫≠n SPA Points
 */
export function showSPAEarnedNotification({
  earnedSpa,
  source,
  newTotal,
}: SPAEarnedData) {
  const emoji = '‚≠ê';

  toast({
    title: `${emoji} SPA Points!`,
    description: `+${earnedSpa} SPA Points t·ª´ ${source}. T·ªïng: ${newTotal.toLocaleString('vi-VN')}`,
    duration: 4000,
    className:
      'bg-gradient-to-r from-yellow-500 to-orange-500 text-white border-yellow-600',
  });
}

/**
 * Hi·ªÉn th·ªã th√¥ng b√°o c·∫£nh b√°o khi g·∫ßn ƒë·∫°t gi·ªõi h·∫°n SPA h√†ng ng√†y
 */
export function showSPADailyLimitWarning(currentDaily: number, limit: number) {
  const remaining = limit - currentDaily;

  if (remaining <= 100 && remaining > 0) {
    toast({
      title: '‚ö†Ô∏è G·∫ßn ƒë·∫°t gi·ªõi h·∫°n SPA',
      description: `C√≤n ${remaining} SPA Points c√≥ th·ªÉ ki·∫øm h√¥m nay t·ª´ th√°ch ƒë·∫•u`,
      duration: 6000,
      className: 'bg-gradient-to-r from-amber-500 to-orange-500 text-white',
    });
  } else if (remaining <= 0) {
    toast({
      title: 'üö´ ƒê√£ ƒë·∫°t gi·ªõi h·∫°n SPA',
      description:
        'B·∫°n ƒë√£ ki·∫øm ƒë·ªß SPA Points t·ª´ th√°ch ƒë·∫•u h√¥m nay. Quay l·∫°i v√†o ng√†y mai!',
      duration: 6000,
      className: 'bg-gradient-to-r from-red-500 to-red-600 text-white',
    });
  }
}

/**
 * Hi·ªÉn th·ªã th√¥ng b√°o milestone ƒë·∫°t ƒë∆∞·ª£c
 */
export function showMilestoneCompletedNotification(
  milestoneName: string,
  reward: string
) {
  toast({
    title: 'üèÜ Milestone ho√†n th√†nh!',
    description: `B·∫°n ƒë√£ ƒë·∫°t ƒë∆∞·ª£c "${milestoneName}". Ph·∫ßn th∆∞·ªüng: ${reward}`,
    duration: 7000,
    className:
      'bg-gradient-to-r from-purple-500 to-pink-500 text-white border-purple-600',
  });
}

/**
 * Hi·ªÉn th·ªã th√¥ng b√°o chu·ªói th·∫Øng
 */
export function showWinStreakNotification(
  streakCount: number,
  bonusPoints: number
) {
  toast({
    title: 'üî• Chu·ªói th·∫Øng!',
    description: `${streakCount} tr·∫≠n th·∫Øng li√™n ti·∫øp! Bonus: +${bonusPoints} SPA Points`,
    duration: 5000,
    className: 'bg-gradient-to-r from-orange-500 to-red-500 text-white',
  });
}

/**
 * Hi·ªÉn th·ªã th√¥ng b√°o comeback
 */
export function showComebackNotification(bonusPoints: number) {
  toast({
    title: 'üí™ Comeback th√†nh c√¥ng!',
    description: `Th·∫Øng ng∆∞·ª£c t·ª´ th·∫ø b·∫•t l·ª£i! Bonus: +${bonusPoints} SPA Points`,
    duration: 6000,
    className: 'bg-gradient-to-r from-emerald-500 to-teal-500 text-white',
  });
}
