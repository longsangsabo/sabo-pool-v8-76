import React, { useState, useEffect } from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/shared/components/ui/card';
import { Button } from '@/shared/components/ui/button';
import { Badge } from '@/shared/components/ui/badge';
import { Alert, AlertDescription } from '@/shared/components/ui/alert';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/shared/components/ui/tabs';
import {
  Languages,
  Play,
  Pause,
  RefreshCw,
  FileText,
  CheckCircle,
  XCircle,
  Clock,
  Settings,
  BarChart,
  Bot,
} from 'lucide-react';
import { toast } from 'sonner';
import {
  translationService,
  useAutoTranslation,
} from '@/services/translationService';
import { supabase } from '@/integrations/supabase/client';

interface TranslationStats {
  totalTasks: number;
  pendingTasks: number;
  completedTasks: number;
  failedTasks: number;
  lastTranslated: string | null;
}

interface TranslationTask {
  id: string;
  page_path: string;
  component_name: string;
  source_language: string;
  target_language: string;
  status: 'pending' | 'processing' | 'completed' | 'failed';
  created_at: string;
  updated_at: string;
}

const AutoTranslationWorkflow: React.FC = () => {
  const [isRunning, setIsRunning] = useState(false);
  const [stats, setStats] = useState<TranslationStats>({
    totalTasks: 0,
    pendingTasks: 0,
    completedTasks: 0,
    failedTasks: 0,
    lastTranslated: null,
  });
  const [tasks, setTasks] = useState<TranslationTask[]>([]);
  const [loading, setLoading] = useState(false);

  const { batchTranslate, manualTranslate, getStats, getTasks, clearTasks } =
    useAutoTranslation();

  useEffect(() => {
    loadStats();
    loadTasks();

    // Set up periodic refresh for demo
    const interval = setInterval(() => {
      loadStats();
      loadTasks();
    }, 5000);

    return () => {
      clearInterval(interval);
    };
  }, []);

  const loadStats = async () => {
    try {
      const statsData = await getStats();
      setStats(statsData);
    } catch (error) {
      console.error('L·ªói khi t·∫£i th·ªëng k√™:', error);
    }
  };

  const loadTasks = async () => {
    try {
      const tasks = getTasks();
      setTasks(tasks);
    } catch (error) {
      console.error('L·ªói khi t·∫£i tasks:', error);
    }
  };

  const startAutoTranslation = async () => {
    setIsRunning(true);
    setLoading(true);
    toast.info('üöÄ B·∫Øt ƒë·∫ßu workflow d·ªãch thu·∫≠t t·ª± ƒë·ªông');

    try {
      await batchTranslate();
      // Refresh data after translation
      setTimeout(() => {
        loadStats();
        loadTasks();
      }, 1000);
      toast.success('‚úÖ Workflow d·ªãch thu·∫≠t ho√†n th√†nh');
    } catch (error) {
      console.error('L·ªói workflow:', error);
      toast.error('‚ùå L·ªói trong qu√° tr√¨nh d·ªãch thu·∫≠t');
    } finally {
      setIsRunning(false);
      setLoading(false);
    }
  };

  const pauseAutoTranslation = () => {
    setIsRunning(false);
    toast.info('‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng workflow d·ªãch thu·∫≠t');
  };

  const refreshData = async () => {
    setLoading(true);
    await Promise.all([loadStats(), loadTasks()]);
    setLoading(false);
    toast.success('üîÑ ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu');
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'pending':
        return (
          <Badge variant='secondary'>
            <Clock className='h-3 w-3 mr-1' />
            Ch·ªù x·ª≠ l√Ω
          </Badge>
        );
      case 'processing':
        return (
          <Badge variant='default'>
            <RefreshCw className='h-3 w-3 mr-1 animate-spin' />
            ƒêang x·ª≠ l√Ω
          </Badge>
        );
      case 'completed':
        return (
          <Badge variant='default'>
            <CheckCircle className='h-3 w-3 mr-1' />
            Ho√†n th√†nh
          </Badge>
        );
      case 'failed':
        return (
          <Badge variant='destructive'>
            <XCircle className='h-3 w-3 mr-1' />
            Th·∫•t b·∫°i
          </Badge>
        );
      default:
        return <Badge variant='outline'>{status}</Badge>;
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString('vi-VN');
  };

  return (
    <div className='space-y-6'>
      <div className='flex items-center justify-between'>
        <div className='flex items-center gap-2'>
          <Languages className='h-6 w-6 text-primary' />
          <h2 className='text-2xl font-bold'>Workflow D·ªãch Thu·∫≠t T·ª± ƒê·ªông</h2>
        </div>
        <div className='flex gap-2'>
          <Button
            variant='outline'
            size='sm'
            onClick={refreshData}
            disabled={loading}
          >
            <RefreshCw
              className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`}
            />
            L√†m m·ªõi
          </Button>
          {isRunning ? (
            <Button
              variant='secondary'
              onClick={pauseAutoTranslation}
              disabled={loading}
            >
              <Pause className='h-4 w-4 mr-2' />
              T·∫°m d·ª´ng
            </Button>
          ) : (
            <Button onClick={startAutoTranslation} disabled={loading}>
              <Play className='h-4 w-4 mr-2' />
              B·∫Øt ƒë·∫ßu d·ªãch
            </Button>
          )}
        </div>
      </div>

      <Alert>
        <Bot className='h-4 w-4' />
        <AlertDescription>
          <strong>Workflow t·ª± ƒë·ªông:</strong> H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông ph√°t hi·ªán trang
          m·ªõi v√† d·ªãch thu·∫≠t c√°c n·ªôi dung c·∫ßn thi·∫øt. S·ª≠ d·ª•ng AI (OpenAI) ƒë·ªÉ d·ªãch
          thu·∫≠t ch√≠nh x√°c v√† ph√π h·ª£p v·ªõi b·ªëi c·∫£nh bi-a.
        </AlertDescription>
      </Alert>

      <Tabs defaultValue='overview' className='space-y-4'>
        <TabsList className='grid w-full grid-cols-4'>
          <TabsTrigger value='overview'>T·ªïng quan</TabsTrigger>
          <TabsTrigger value='tasks'>Tasks d·ªãch thu·∫≠t</TabsTrigger>
          <TabsTrigger value='settings'>C√†i ƒë·∫∑t</TabsTrigger>
          <TabsTrigger value='manual'>D·ªãch th·ªß c√¥ng</TabsTrigger>
        </TabsList>

        <TabsContent value='overview' className='space-y-4'>
          <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4'>
            <Card>
              <CardHeader className='flex flex-row items-center justify-between space-y-0 pb-2'>
                <CardTitle className='text-sm font-medium'>
                  T·ªïng Tasks
                </CardTitle>
                <FileText className='h-4 w-4 text-muted-foreground' />
              </CardHeader>
              <CardContent>
                <div className='text-2xl font-bold'>{stats.totalTasks}</div>
                <p className='text-xs text-muted-foreground'>
                  T·∫•t c·∫£ tasks d·ªãch thu·∫≠t
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className='flex flex-row items-center justify-between space-y-0 pb-2'>
                <CardTitle className='text-sm font-medium'>Ch·ªù x·ª≠ l√Ω</CardTitle>
                <Clock className='h-4 w-4 text-yellow-500' />
              </CardHeader>
              <CardContent>
                <div className='text-2xl font-bold'>{stats.pendingTasks}</div>
                <p className='text-xs text-muted-foreground'>Tasks ƒëang ch·ªù</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className='flex flex-row items-center justify-between space-y-0 pb-2'>
                <CardTitle className='text-sm font-medium'>
                  Ho√†n th√†nh
                </CardTitle>
                <CheckCircle className='h-4 w-4 text-green-500' />
              </CardHeader>
              <CardContent>
                <div className='text-2xl font-bold'>{stats.completedTasks}</div>
                <p className='text-xs text-muted-foreground'>D·ªãch th√†nh c√¥ng</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className='flex flex-row items-center justify-between space-y-0 pb-2'>
                <CardTitle className='text-sm font-medium'>Th·∫•t b·∫°i</CardTitle>
                <XCircle className='h-4 w-4 text-red-500' />
              </CardHeader>
              <CardContent>
                <div className='text-2xl font-bold'>{stats.failedTasks}</div>
                <p className='text-xs text-muted-foreground'>C·∫ßn x·ª≠ l√Ω l·∫°i</p>
              </CardContent>
            </Card>
          </div>

          <Card>
            <CardHeader>
              <CardTitle className='flex items-center gap-2'>
                <BarChart className='h-5 w-5' />
                Tr·∫°ng th√°i Workflow
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className='space-y-4'>
                <div className='flex items-center justify-between'>
                  <span>Tr·∫°ng th√°i:</span>
                  <Badge variant={isRunning ? 'default' : 'secondary'}>
                    {isRunning ? 'ƒêang ch·∫°y' : 'ƒê√£ d·ª´ng'}
                  </Badge>
                </div>
                <div className='flex items-center justify-between'>
                  <span>L·∫ßn d·ªãch cu·ªëi:</span>
                  <span className='text-sm text-muted-foreground'>
                    {stats.lastTranslated
                      ? formatDate(stats.lastTranslated)
                      : 'Ch∆∞a c√≥'}
                  </span>
                </div>
                <div className='flex items-center justify-between'>
                  <span>T·ª∑ l·ªá th√†nh c√¥ng:</span>
                  <span className='text-sm'>
                    {stats.totalTasks > 0
                      ? `${Math.round((stats.completedTasks / stats.totalTasks) * 100)}%`
                      : '0%'}
                  </span>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value='tasks' className='space-y-4'>
          <Card>
            <CardHeader>
              <CardTitle>L·ªãch s·ª≠ Tasks D·ªãch Thu·∫≠t</CardTitle>
              <CardDescription>
                Theo d√µi ti·∫øn tr√¨nh d·ªãch thu·∫≠t cho t·ª´ng trang
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className='space-y-4'>
                {tasks.length === 0 ? (
                  <div className='text-center py-8 text-muted-foreground'>
                    Ch∆∞a c√≥ tasks d·ªãch thu·∫≠t n√†o
                  </div>
                ) : (
                  tasks.map(task => (
                    <div
                      key={task.id}
                      className='flex items-center justify-between p-4 border rounded-lg'
                    >
                      <div className='space-y-1'>
                        <div className='font-medium'>{task.page_path}</div>
                        <div className='text-sm text-muted-foreground'>
                          Component: {task.component_name}
                        </div>
                        <div className='text-xs text-muted-foreground'>
                          {task.source_language.toUpperCase()} ‚Üí{' '}
                          {task.target_language.toUpperCase()}
                        </div>
                      </div>
                      <div className='text-right space-y-2'>
                        {getStatusBadge(task.status)}
                        <div className='text-xs text-muted-foreground'>
                          {formatDate(task.updated_at)}
                        </div>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value='settings' className='space-y-4'>
          <Card>
            <CardHeader>
              <CardTitle className='flex items-center gap-2'>
                <Settings className='h-5 w-5' />
                C√†i ƒë·∫∑t Workflow
              </CardTitle>
            </CardHeader>
            <CardContent className='space-y-4'>
              <Alert>
                <AlertDescription>
                  C·∫ßn thi·∫øt l·∫≠p OpenAI API key trong Supabase Edge Function
                  Secrets ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng d·ªãch thu·∫≠t AI.
                </AlertDescription>
              </Alert>

              <div className='space-y-2'>
                <h4 className='font-medium'>T√≠nh nƒÉng t·ª± ƒë·ªông:</h4>
                <ul className='list-disc list-inside space-y-1 text-sm text-muted-foreground'>
                  <li>Ph√°t hi·ªán trang m·ªõi t·ª± ƒë·ªông</li>
                  <li>Tr√≠ch xu·∫•t keys d·ªãch thu·∫≠t t·ª´ component</li>
                  <li>D·ªãch thu·∫≠t th√¥ng minh v·ªõi AI</li>
                  <li>C·∫≠p nh·∫≠t t·ª´ ƒëi·ªÉn d·ªãch thu·∫≠t real-time</li>
                  <li>Theo d√µi v√† b√°o c√°o ti·∫øn tr√¨nh</li>
                </ul>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value='manual' className='space-y-4'>
          <Card>
            <CardHeader>
              <CardTitle>D·ªãch Thu·∫≠t Th·ªß C√¥ng</CardTitle>
              <CardDescription>
                D·ªãch thu·∫≠t c√°c trang c·ª• th·ªÉ theo y√™u c·∫ßu
              </CardDescription>
            </CardHeader>
            <CardContent className='space-y-4'>
              <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>
                <Button
                  variant='outline'
                  onClick={() =>
                    manualTranslate('/tournaments', 'TournamentsPage')
                  }
                >
                  D·ªãch trang Gi·∫£i ƒë·∫•u
                </Button>
                <Button
                  variant='outline'
                  onClick={() => manualTranslate('/admin/users', 'AdminUsers')}
                >
                  D·ªãch trang Qu·∫£n l√Ω User
                </Button>
                <Button
                  variant='outline'
                  onClick={() =>
                    manualTranslate('/admin/development', 'DevelopmentTools')
                  }
                >
                  D·ªãch trang Dev Tools
                </Button>
              </div>

              <Alert>
                <AlertDescription>
                  <strong>L∆∞u √Ω:</strong> D·ªãch thu·∫≠t th·ªß c√¥ng s·∫Ω ghi ƒë√® c√°c b·∫£n
                  d·ªãch hi·ªán c√≥. H√£y ch·∫Øc ch·∫Øn tr∆∞·ªõc khi th·ª±c hi·ªán.
                </AlertDescription>
              </Alert>

              <div className='mt-4'>
                <Button
                  variant='outline'
                  onClick={() => {
                    clearTasks();
                    loadStats();
                    loadTasks();
                    toast.success('üóëÔ∏è ƒê√£ x√≥a t·∫•t c·∫£ tasks d·ªãch thu·∫≠t');
                  }}
                  className='w-full'
                >
                  X√≥a t·∫•t c·∫£ Tasks (Demo)
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default AutoTranslationWorkflow;
