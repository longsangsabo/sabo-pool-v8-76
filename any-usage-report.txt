src/types/tournament.ts:  contact_info?: any;
src/types/common.ts:// Common types to replace 'any' usage throughout the application
src/types/common.ts:  [key: string]: any;
src/types/common.ts:  [key: string]: any;
src/types/common.ts:  [key: string]: any;
src/types/common.ts:  [key: string]: any;
src/types/common.ts:  details?: any;
src/types/common.ts:  [key: string]: any;
src/types/common.ts:  children?: any;
src/types/common.ts:  session: any | null;
src/test/setup.ts:// Reset any request handlers that we may add during the tests,
src/utils/supabaseHealth.ts:  data?: any;
src/utils/supabaseHealth.ts:  } catch (error: any) {
src/utils/supabaseHealth.ts:    } catch (error: any) {
src/utils/databaseTester.ts:  data?: any;
src/utils/databaseTester.ts:    testFn: () => Promise<any>
src/utils/databaseTester.ts:    } catch (error: any) {
src/utils/databaseTester.ts:        } catch (error: any) {
src/utils/databaseTester.ts:        } catch (error: any) {
src/utils/clubNotifications.ts:  club: any,
src/utils/clubNotifications.ts:  booking: any,
src/utils/databaseStatusChecker.ts:    // Check if there's any data in profiles
src/utils/databaseStatusChecker.ts:  } catch (error: any) {
src/utils/databaseConnectionTest.ts:  data?: any;
src/utils/databaseConnectionTest.ts:    testFn: () => Promise<any>
src/utils/databaseConnectionTest.ts:    } catch (error: any) {
src/utils/authHelpers.ts:export const handleAuthError = (error: any) => {
src/utils/databaseSchemaValidator.ts:  private async getTableInfo(tableName: string): Promise<any> {
src/utils/databaseSchemaValidator.ts:      return data.map((policy: any) => policy.policy_name);
src/utils/databaseSchemaValidator.ts:      return [...new Set(data.map((index: any) => index.index_name))];
src/utils/databaseSchemaValidator.ts:      result.columns = tableInfo.map((col: any) => col.column_name);
src/utils/databaseSchemaValidator.ts:    } catch (error: any) {
src/utils/quickDatabaseCheck.ts:        // Sử dụng any để bypass type checking cho dynamic table names
src/utils/quickDatabaseCheck.ts:        const { data, error } = await (supabase as any)
src/utils/quickDatabaseCheck.ts:      } catch (error: any) {
src/utils/quickDatabaseCheck.ts:  } catch (error: any) {
src/components/tournament/TournamentRecommendationCard.tsx:  tournament: any;
src/components/tournament/TournamentRecommendationCard.tsx:  onJoin: (tournament: any) => void;
src/components/tournament/TournamentRecommendationCard.tsx:  const getRecommendationReason = (tournament: any) => {
src/components/tournament/TournamentRecommendationCard.tsx:  const getRecommendationReasons = (tournament: any) => {
src/components/tournament/TournamentDiscoveryPage.tsx:  const [filteredTournaments, setFilteredTournaments] = useState<any[]>([]);
src/components/tournament/TournamentDiscoveryPage.tsx:  const handleJoinTournament = async (tournament: any) => {
src/components/tournament/TournamentDetailsModal.tsx:  tournament: any;
src/components/tournament/TournamentDetailsModal.tsx:  onJoin: (tournament: any) => void;
src/components/tournament/TournamentCreator.tsx:  const handleInputChange = (key: keyof TournamentForm, value: any) => {
src/components/search/AdvancedSearch.tsx:  const handleFilterChange = (key: keyof SearchFilters, value: any) => {
src/components/AuthTestingDashboard.tsx:  data?: any;
src/components/AuthTestingDashboard.tsx:    } catch (error: any) {
src/components/AuthTestingDashboard.tsx:      } catch (error: any) {
src/components/AuthTestingDashboard.tsx:    } catch (error: any) {
src/components/SeasonHistoryTab.tsx:  const [stats, setStats] = useState<any>(null);
src/components/pwa/PWAInstallPrompt.tsx:  const [deferredPrompt, setDeferredPrompt] = useState<any>(null);
src/components/common/FormInput.tsx:  register?: any;
src/components/QRCodeScanner.tsx:                  onChange={e => setGameType(e.target.value as any)}
src/components/profile/BasicProfileForm.tsx:  register: any;
src/components/profile/BasicProfileForm.tsx:  handleSubmit: any;
src/components/profile/BasicProfileForm.tsx:  handleUpdateProfile: (data: any) => void;
src/components/profile/BasicProfileForm.tsx:  errors: any;
src/components/profile/BasicProfileForm.tsx:  user: any;
src/components/profile/BasicProfileForm.tsx:  clubs: any[];
src/components/profile/BasicProfileForm.tsx:  setValue: (field: string, value: any) => void;
src/components/profile/ProfileSettings.tsx:                    privacy_level: option.value as any,
src/components/DiscoveryFilters.tsx:  onFiltersChange: (filters: any) => void;
src/components/auth/EnhancedAuthFlow.tsx:    } catch (error: any) {
src/components/auth/EnhancedAuthFlow.tsx:    } catch (error: any) {
src/components/DiscoveryStats.tsx:  currentPlayer?: any;
src/components/TournamentCard.tsx:    t => t.code === (tournament as any).tier_code
src/components/EmailVerificationBanner.tsx:    } catch (error: any) {
src/components/CreateChallengeForm.tsx:  onChallengeCreated?: (challenge: any) => void;
src/components/CreateChallengeForm.tsx:  const [opponents, setOpponents] = useState<any[]>([]);
src/components/EloCalculator.tsx:  const [prediction, setPrediction] = useState<any>(null);
src/components/EloCalculator.tsx:                    onValueChange={(value: any) =>
src/components/EloCalculator.tsx:                      onValueChange={(value: any) =>
src/components/EnhancedLeaderboard.tsx:                onValueChange={(value: any) => setSortBy(value)}
src/components/security/SecuritySettings.tsx:  const handleSettingChange = (key: keyof SecuritySettings, value: any) => {
src/components/ClubProfileTab.tsx:  user: any;
src/components/ClubProfileTab.tsx:  profile: any;
src/components/ClubProfileTab.tsx:  const handleClubRegistration = async (formData: any) => {
src/components/ClubProfileTab.tsx:    } catch (error: any) {
src/components/notifications/NotificationCenter.tsx:  action_data?: any;
src/components/ChallengeResponseModal.tsx:  const [suggestedClubs, setSuggestedClubs] = useState<any[]>([]);
src/components/ChallengeVerificationModal.tsx:      const verificationData: any = {};
src/components/ChallengeVerificationModal.tsx:              onValueChange={(value: any) => setVerificationType(value)}
src/components/EnhancedNotificationCard.tsx:    proposalData?: Record<string, any>
src/components/EnhancedNotificationCard.tsx:    proposalData?: Record<string, any>
src/components/DebugPanel.tsx:  const [debugInfo, setDebugInfo] = useState<any>(null);
src/components/RankRequestsTab.tsx:  user: any;
src/components/RankRequestsTab.tsx:      const updateData: any = { status };
src/components/RankRegistrationForm.tsx:  const [userRankRequests, setUserRankRequests] = useState<any[]>([]);
src/components/RankRegistrationForm.tsx:  const onSubmit = async (formData: any) => {
src/pages/Season2Page.tsx:  const [leaderboard, setLeaderboard] = React.useState<any[]>([]);
src/pages/Season2Page.tsx:  const [userStats, setUserStats] = React.useState<any | null>(null);
src/pages/Dashboard.tsx:  const [userProfile, setUserProfile] = useState<any>(null);
src/pages/WalletPage.tsx:  transactions: any[];
src/pages/SecurityPage.tsx:  const handleSaveSettings = (settings: any) => {
src/pages/SocialFeedPage.tsx:  metadata?: Record<string, any>;
src/hooks/useOfflineQueue.tsx:  data: Record<string, any>;
src/hooks/useOfflineQueue.tsx:    data: Record<string, any>,
src/hooks/useEnhancedChallenges.tsx:  club: any,
src/hooks/useQRSystem.tsx:    [key: string]: any;
src/hooks/useQRSystem.tsx:    [key: string]: any;
src/hooks/usePayment.tsx:    [key: string]: any;
src/hooks/usePayment.tsx:    [key: string]: any;
src/hooks/marketplace/types.ts:  specifications?: any;
src/hooks/useDiscovery.tsx:    [key: string]: any;
src/hooks/useRealtimeFeed.tsx:  const handleFeedUpdate = (payload: any) => {
src/hooks/useEnhancedNotifications.tsx:  data?: any;
src/hooks/useCoaches.tsx:  [key: string]: any;
src/hooks/useRealtimeSubscriptions.tsx:  onBookingCreated?: (booking: any) => void;
src/hooks/useRealtimeSubscriptions.tsx:  onBookingUpdated?: (booking: any) => void;
src/hooks/useRealtimeSubscriptions.tsx:  const handleBookingUpdate = (payload: any) => {
src/hooks/useRealtimeSubscriptions.tsx:  onUpdate?: (payload: any) => void
src/hooks/useTournamentRecommendations.tsx:  contact_info: any;
src/hooks/useTournamentRecommendations.tsx:    userInteractions: any[]
src/hooks/useRankRequests.tsx:    [key: string]: any;
